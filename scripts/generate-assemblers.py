import os.path
from sys import argv
from pyiga import vform
from pyiga.codegen import cython as backend

def generate(dim):
    code = backend.CodeGen()

    def gen(vf, classname):
        backend.AsmGenerator(vf, classname, code).generate()

    nD = str(dim) + 'D'
    gen(vform.mass_vf(dim), 'MassAssembler'+nD)
    gen(vform.stiffness_vf(dim), 'StiffnessAssembler'+nD)
    gen(vform.heat_st_vf(dim), 'HeatAssembler_ST'+nD)
    gen(vform.wave_st_vf(dim), 'WaveAssembler_ST'+nD)
    gen(vform.divdiv_vf(dim), 'DivDivAssembler'+nD)
    gen(vform.L2functional_vf(dim), 'L2FunctionalAssembler'+nD)
    gen(vform.L2functional_vf(dim, physical=True), 'L2FunctionalAssemblerPhys'+nD)
    gen(vform.linelast_vf(dim), 'LinelastAssembler'+nD) ####???
     :

    return code.result()

if __name__ == '__main__':
    if '--generic' in argv[1:]:
        path = os.path.join(os.path.dirname(__file__), "..", "pyiga", "genericasm.pxi")
        with open(path, 'w') as f:
            f.write('# file generated by generate-assemblers.py\n')
            f.write(backend.generate_generic(dim=1))
            f.write(backend.generate_generic(dim=2))
            f.write(backend.generate_generic(dim=3))

    if not '--generic-only' in argv[1:]:
        path = os.path.join(os.path.dirname(__file__), "..", "pyiga", "assemblers.pyx")
        with open(path, 'w') as f:
            f.write(backend.preamble())
            f.write(generate(dim=2))
            f.write(generate(dim=3))

